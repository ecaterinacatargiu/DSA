#ifndef SDA_LAB4_SORTEDINDEXEDLIST_H#define SDA_LAB4_SORTEDINDEXEDLIST_H#include "ListIterator.h"class ListIterator;typedef int TComp;#define NULL_TELEM -1typedef bool(*Relation)(TComp, TComp);#define INIT_CAPACITY 10struct SLLA {	TComp   *elems;	int     *next;	int     cap;	int     head;	int     firstEmpty;	void    resize() {		cap *= 2;		TComp   *newElems = new TComp[cap];		int     *newNext = new int[cap];		for (int i = 0; i < cap; i++) {			newElems[i] = elems[i];			newNext[i] = next[i];		}		delete[] elems;		delete[] next;		elems = newElems;		next = newNext;	}};class SortedIndexedList {	friend class ListIterator;private:	Relation    r;	SLLA        list;	int         _size;public:	// constructor	explicit SortedIndexedList(Relation r);	// returns the size of the list	int size() const;	//checks if the list is empty	bool isEmpty() const;	// returns an element from a position	//throws exception if the position is not valid	TComp getElement(int pos) const;	// adds an element	//throws an exception if the position is not valid	void add(TComp e);	// removes an element from a given position	//returns the removed element	//throws an exception if the position is not valid	TComp remove(int pos);	// searches for an element and returns the first position where the element appears or -1 if the element is not in the list	int search(TComp e) const;	// returns an iterator set to the first element of the list or invalid if the list is empty	ListIterator iterator();	//destructor	~SortedIndexedList();};#endif